description = "Lichen Framework"

// Remember that after generating a release, this should be incremented. Also don't forget to
// tag the release in Subversion.
lichenVersion="0.1"

tapestryVersion = '5.3.0'
easymockVersion = '3.0'
hibernateVersion = '3.6.7.Final'
springVersion = '2.5.6.SEC02'


version = System.getProperty('project-version', lichenVersion)

doSign = !project.hasProperty('noSign') && project.hasProperty("signing.keyId")

buildscript {
  repositories {
    mavenLocal()
    mavenRepo name: "Gradle", urls: "http://repo.gradle.org/gradle/plugins-snapshots/"
  }
  dependencies {
    classpath "org.gradle.plugins:gradle-signing-plugin:0.0.1-SNAPSHOT"
  }
  def githubBase = 'https://github.com/valkolovos/gradle_cobertura/raw/master/ivy'
  apply from: "${githubBase}/gradle_cobertura/gradle_cobertura/1.0-rc4/coberturainit.gradle"
}

allprojects {
    
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    
    ideaProject {
        javaVersion = 1.5
        beforeConfigured { project ->
            project.modulePaths.clear()
        }
    }
 
    repositories {
        mavenCentral()

        // All things JBoss/Javassist/Hibernate
        mavenRepo urls: "https://repository.jboss.org/nexus/content/repositories/releases/" 
        mavenRepo name: "cloudhopper", urls: "http://maven.cloudhopper.com/repos/third-party/"
    }
}

subprojects {
  version =  parent.version  
  
  apply plugin: 'java'
  apply plugin: 'groovy' // mostly for testing
  apply plugin: 'maven'
  apply plugin: 'project-report'
  
  sourceCompatibility = '1.5'
  targetCompatibility = '1.5'

  // This may be temporary, to help track down/verify the ProQuest production deployment
  // issue.
  compileJava {
    debug = false
  }
      
  group = 'lichen'  
  
  configurations {
    provided
    deployerJars
    
    // meta -- non-code artifacts, such as sources and javadoc JARs
    meta
    
    // published -- what gets uploaded to the Nexus repository
    published.extendsFrom archives, meta
    if (doSign) { published.extendsFrom signatures }    
  }
  
  // See http://jira.codehaus.org/browse/GRADLE-784
  
  sourceSets {
    main { 
      compileClasspath += configurations.provided 
    }
    test {
      compileClasspath += configurations.provided
      runtimeClasspath += configurations.provided
    }
  }
  
  ideaModule {
      scopes.PROVIDED.plus += configurations.provided
  }
  
  dependencies {
        testCompile "junit:junit:4.8.1"    

  }
  
  test {
	  useJUnit()
      maxHeapSize = "400M"
      
      jvmArgs("-XX:MaxPermSize=512m")        
  }
  
  task sourcesJar(type: Jar, dependsOn:classes) {
     classifier = 'sources'
     from sourceSets.main.allSource
  }

  artifacts {
     meta sourcesJar
  }    
  
  if (doSign) {
    apply plugin: 'signing'
    // sign (create PGP signature for) archives (standard JARs)
    // and meta (sources JARs)
    signing { sign configurations.archives, configurations.meta }
  }
  [compileJava, compileTestJava,javadoc]*.options*.encoding = 'UTF-8'
}

// Specific to top-level build, not set for subprojects:

configurations {
  javadoc
  published.extendsFrom archives, meta
  if (doSign) { published.extendsFrom signatures }
}

subprojects.each { project.evaluationDependsOn(it.name) }

// Cribbed from https://github.com/hibernate/hibernate-core/blob/master/release/release.gradle#L19

javadocBuildDir = dir(buildDirName + "/documentation/javadocs")

task aggregateJavadoc(type: Javadoc, group: "Documentation") {

   dependsOn configurations.javadoc
   
   description = "Build the aggregated JavaDocs for all modules"
   maxMemory = '512m'
   destinationDir = javadocBuildDir.dir
   configure(options) {
       windowTitle = 'Lichen API Documentation'
       docTitle = "Lichen JavaDoc ($project.version)"
       bottom = "Copyright &copy; 2011 <a href=\"http://jcai.github.com/lichen\">the original author or authors.</a>."
       use = true
       links = [ 'http://download.oracle.com/javase/6/docs/api/', 'http://download.oracle.com/javaee/6/api/' ]
       encoding = "utf-8"
   }

   subprojects.each { sp -> 
     sp.sourceSets.all.findAll { set -> set.name != "test" }.each { set ->
       
       source set.java

       classpath += set.classes + set.compileClasspath

       // Some of the component .xdoc files refer to PNG images
       // (we could also exclude .java and .xdoc)
       copy {
         from set.java.srcDirs.toList()                 
         into javadocBuildDir.dir
         include '**/*.png'
       }       
     }
   }
 }
 
 aggregateJavadoc.doLast {
    copy {
        from new File( projectDir, 'src/javadoc/images' )
        into new File( javadocBuildDir.dir, "/images" )
    }
}

task clean(type: Delete) {
  delete buildDirName
}

task continuousIntegration(dependsOn: [subprojects.build, 'aggregateJavadoc', subprojects.uploadPublished], 
  description: "Task executed on Jenkins CI server after SVN commits")

task generateRelease(dependsOn: ['continuousIntegration', subprojects.uploadPublished, 'zippedSources', 'zippedJavadoc'], 
  group: "Release artifact",
  description: "Generates and uploads a final release to Apache Nexus")

task wrapper(type: Wrapper) {
  gradleVersion = '1.0-milestone-3'
  description = "Regenerates the Gradle Wrapper files"
}

task zippedSources(type: Zip) {
  description = "Creates a combined Zip file of all sub-project's sources"
  group = "Release artifact"

  destinationDir = buildDir
  baseName = "egf-lichen"
  version = project.version
  classifier = "sources"

  from project.projectDir
  exclude "**/.*/**"
  exclude "**/bin/**"
  exclude "**/target/**"
  exclude "**/build/**"
  exclude "**/test-output/**"  // Left around by TestNG sometimes 
}

task zippedJavadoc(type: Zip, dependsOn: aggregateJavadoc) {
  description = "Zip archive of the project's aggregate JavaDoc"
  group = "Release artifact"
  
  destinationDir = buildDir  
  baseName = "egf-lichen"
  version = project.version  
  classifier = "javadocs"
  
  from javadocBuildDir.dir
  into "apidocs"
}

boolean isSnapshot() {
  project.version.contains('SNAPSHOT')
}
